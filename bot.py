import telebot
from telebot import types

bot = telebot.TeleBot('6211233672:AAGLlrz8Wt3BzUag1GYb930PFe7-vVnVtP0')
user_data = {}
menu1 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
btn1 = types.KeyboardButton("–î–æ–º–∞—à–Ω–∏–π –º–∞—Å—Å–∞–∂")
menu1.row(btn1)
btn2 = types.KeyboardButton("–ü–∏—Ç–∞–Ω–∏–µ")
menu1.row(btn2)
btn3 = types.KeyboardButton("–°–æ–Ω")
menu1.row(btn3)
btn4 = types.KeyboardButton("–ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏")
menu1.row(btn4)
back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
menu1.row(back)

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    btn2 = types.KeyboardButton("–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å?")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id,
                     text="–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã".format(
                         message.from_user), reply_markup=markup)


@bot.message_handler(content_types=['text', 'document', 'audio'])
def func(message):
    if message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è":
        bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è, —á—Ç–æ —è –º–æ–≥—É")
    if message.text == "–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å?":
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ —Ç–µ–º—É", reply_markup=menu1)

    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
        button2 = types.KeyboardButton("–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å?")
        markup.add(button1, button2)
        bot.send_message(message.from_user.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)


    elif message.text == "–î–æ–º–∞—à–Ω–∏–π –º–∞—Å—Å–∞–∂":
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ", callback_data="prepare")
        markup.row(button1)
        button2 = types.InlineKeyboardButton(text="–ü–æ–ª—å–∑–∞", callback_data="useful")
        markup.row(button2)
        button3 = types.InlineKeyboardButton(text="–í–∏–¥—ã –º–∞—Å—Å–∞–∂–∞", callback_data="various_mas")
        markup.row(button3)
        button4 = types.InlineKeyboardButton(text="–ú–∞—Å—Å–∞–∂–µ—Ä—ã –¥–ª—è –ª–∏—Ü–∞ ", callback_data="equipment")
        markup.row(button4)
        back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")
        markup.row(back)
        bot.send_message(message.from_user.id,
                         "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∑–Ω–∞—Ç—å –ø—Ä–æ –º–∞—Å—Å–∞–∂?".format(message.from_user),
                         reply_markup=markup)

    elif message.text == "–ü–∏—Ç–∞–Ω–∏–µ":
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(text="–í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã", callback_data="vitamins")
        markup.row(button1)
        button2 = types.InlineKeyboardButton(text="–ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="useful_products")
        markup.row(button2)
        button3 = types.InlineKeyboardButton(text="–ü–∏—Ç—å–µ–≤–æ–π —Ä–µ–∂–∏–º", callback_data="water")
        markup.row(button3)
        button4 = types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–π –∫–æ–∂–∏", callback_data="rules")
        markup.row(button4)
        button5 = types.InlineKeyboardButton(text="–í—Ä–µ–¥–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="junk_food")
        markup.row(button5)
        back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")
        markup.row(back)
        bot.send_message(message.from_user.id,
                         "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∑–Ω–∞—Ç—å –ø—Ä–æ –ø–∏—Ç–∞–Ω–∏–µ?".format(message.from_user),
                         reply_markup=markup)
    elif message.text == "–°–æ–Ω":
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(text="–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–ø–∞—Ç—å?", callback_data="how_much")
        markup.row(button1)
        button2 = types.InlineKeyboardButton(text="–í–ª–∏—è–Ω–∏–µ —Å–Ω–∞", callback_data="influence")
        markup.row(button2)
        button3 = types.InlineKeyboardButton(text="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∏", callback_data="bad_sleep")
        markup.row(button3)
        button4 = types.InlineKeyboardButton(text="–ß—Ç–æ —Å—ä–µ—Å—Ç—å, —á—Ç–æ–±—ã –ª—É—á—à–µ —Å–ø–∞—Ç—å?", callback_data="healthy_food")
        markup.row(button4)
        back = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")
        markup.row(back)
        bot.send_message(message.from_user.id,
                         "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∑–Ω–∞—Ç—å –ø—Ä–æ —Å–æ–Ω?".format(message.from_user),
                         reply_markup=markup)

    elif message.text == "–ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏":
        bot.send_message(message.from_user.id, "(—Ç—É—Ç notion –ø–æ–¥–∫–ª—é—á–∏—Ç—å)")

    elif message.text != "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è":
        bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª.../start")


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "prepare":
        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ –º–∞—Å—Å–∞–∂')
    elif call.data == "useful":
        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å')
    elif call.data == "various_mas":
        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ –≤–∏–¥—ã –º–∞—Å—Å–∞–∂–∞')
    elif call.data == "equipment":
        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
    elif call.data == "vitamins":
        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ –≤–∏—Ç–∞–º–∏–Ω—ã')
    elif call.data == "useful_products":
        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã')
    elif call.data == "water":
        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ –≤–æ–¥—É')
    elif call.data == "rules":
        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ –ø—Ä–∞–≤–∏–ª–∞')
    elif call.data == "junk_food":
        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ –Ω–µ–∑–¥–æ—Ä–æ–≤—É—é –ø–∏—â—É')
    elif call.data == "how_much":
        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ —Å–∫–æ–ª—å–∫–æ —Å–ø–∞—Ç—å')
    elif call.data == "influence":
        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ –≤–ª–∏—è–Ω–∏–µ —Å–Ω–∞')
    elif call.data == "bad_sleep":
        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ –±–µ—Å—Å–æ–Ω–∏—Ü—É')
    elif call.data == "healthy_food":
        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ –∑–¥–æ—Ä–æ–≤—É—é –ø–∏—â—É')
    elif call.data == "back":
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ —Ç–µ–º—É', reply_markup=menu1)



# def get_name(message):  # –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–º–∏–ª–∏—é
#    global name;
#    name = message.text;
#    bot.send_message(message.from_user.id, '–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?');
#    bot.register_next_step_handler(message, get_surname);


# def get_surname(message):
#    global surname;
#    surname = message.text;
#    bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?');
#    bot.register_next_step_handler(message, get_age);


# def get_age(message):
#    global age;
#    while age == 0:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
#        try:
#            age = int(message.text)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
#        except Exception:
#            bot.send_message(message.from_user.id, '–¶–∏—Ñ—Ä–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞');
#    bot.send_message(message.from_user.id, '–¢–µ–±–µ ' + str(age) + ' –ª–µ—Ç, —Ç–µ–±—è –∑–æ–≤—É—Ç ' + name + ' ' + surname + '?')


# def get_age(message):
#    global age;
#    while age == 0:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
#        try:
#            age = int(message.text)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
#        except Exception:
#            bot.send_message(message.from_user.id, '–¶–∏—Ñ—Ä–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞');
#    keyboard = types.InlineKeyboardMarkup();  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
#    key_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes');  # –∫–Ω–æ–ø–∫–∞ ¬´–î–∞¬ª
#    keyboard.add(key_yes);  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#    key_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no');
#    keyboard.add(key_no);
#    question = '–¢–µ–±–µ ' + str(age) + ' –ª–µ—Ç, —Ç–µ–±—è –∑–æ–≤—É—Ç ' + name + ' ' + surname + '?';
#    bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)


# @bot.callback_query_handler(func=lambda call: True)
# def callback_worker(call):
#    if call.data == "yes":  # call.data —ç—Ç–æ callback_data, –∫–æ—Ç–æ—Ä—É—é –º—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
#         # –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –∏–ª–∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
#        bot.send_message(call.message.chat.id, '–ó–∞–ø–æ–º–Ω—é : )');
#    if call.data == "no":
#        bot.send_message(call.message.chat.id, '–Ω–µ –∑–∞–ø–æ–º–Ω—é : (');
#         # –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º

# keyboard = types.InlineKeyboardMarkup();
# key_massage = types.InlineKeyboardButton(text='–î–æ–º–∞—à–Ω–∏–π –º–∞—Å—Å–∞–∂', callback_data='massage');
# keyboard.add(key_massage);  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
# key_food = types.InlineKeyboardButton(text='–ü–∏—Ç–∞–Ω–∏–µ', callback_data='food');
# keyboard.add(key_food);
# key_dream = types.InlineKeyboardButton(text='–°–æ–Ω', callback_data='dream');
# keyboard.add(key_dream);
# key_habits = types.InlineKeyboardButton(text='–ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data='habits');
# keyboard.add(key_habits);
# bot.send_message(message.from_user.id, text='–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É: \n', reply_markup=keyboard)
# else:
#   bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /help.")
# if message.text == '/reg':
#   bot.send_message(message.from_user.id, "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?");
#  bot.register_next_step_handler(message, get_name);  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è get_name
# else:
#   bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ /reg');
# else:
# bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /start.")

# @bot.callback_query_handler(func=lambda call: True)
# def callback_worker(call):
#    if call.data == "massage":
#        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ –º–∞—Å—Å–∞–∂');
#    if call.data == "food":
#        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ –ø–∏—Ç–∞–Ω–∏–µ');
#    if call.data == "dream":
#        bot.send_message(call.message.chat.id, '–î–∞–ª–µ–µ –ø—Ä–æ —Å–æ–Ω');
#    if call.data == "dream":
#        bot.send_message(call.message.chat.id, '—Ç—É—Ç notion –ø–æ–¥–∫–ª—é—á–∏—Ç—å');

# @bot.message_handler(commands=['start'])
# def start(message):
#    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
#    btn2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
#    markup.add(btn1, btn2)
#    bot.send_message(message.chat.id,
#                     text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ç–≤–æ–µ–π —Å—Ç–∞—Ç—å–∏ –¥–ª—è habr.com".format(
#                         message.from_user), reply_markup=markup)


# @bot.message_handler(content_types=['text'])
# def func(message):
#    if (message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"):
#        bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ–µ—Ç.. –°–ø–∞—Å–∏–±–æ —á—Ç–æ —á–∏—Ç–∞–µ—à—å —Å—Ç–∞—Ç—å—é!)")
#    elif (message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
#        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#        btn1 = types.KeyboardButton("–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?")
#        btn2 = types.KeyboardButton("–ß—Ç–æ —è –º–æ–≥—É?")
#        back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
#        markup.add(btn1, btn2, back)
#        bot.send_message(message.chat.id, text="–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å", reply_markup=markup)

#    elif (message.text == "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?"):
#        bot.send_message(message.chat.id, "–£ –º–µ–Ω—è –Ω–µ—Ç –∏–º–µ–Ω–∏..")

#    elif message.text == "–ß—Ç–æ —è –º–æ–≥—É?":
#        bot.send_message(message.chat.id, text="–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å —á–∏—Ç–∞—Ç–µ–ª—è–º–∏")

#    elif (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
#        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#        button1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
#        button2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
#        markup.add(button1, button2)
#        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
#    else:
#        bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª..")


# bot.polling(none_stop=True)

bot.polling(none_stop=True, interval=0)
